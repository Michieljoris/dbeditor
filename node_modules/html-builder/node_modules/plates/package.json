{
  "name": "plates",
  "version": "0.4.8",
  "description": "Unobtrusive templating for the flatiron framework",
  "keywords": [
    "templates",
    "templating",
    "unobtrusive"
  ],
  "author": {
    "name": "Nodejitsu Inc.",
    "email": "info@nodejitsu.com"
  },
  "maintainers": [
    {
      "name": "hij1nx",
      "email": "paolo@nodejitsu.com"
    },
    {
      "name": "pksunkara",
      "email": "pavan@nodejitsu.com"
    }
  ],
  "licenses": [
    {
      "type": "MIT"
    }
  ],
  "repositories": [
    {
      "type": "git",
      "url": "git://github.com/flatiron/plates.git"
    }
  ],
  "devDependencies": {
    "vows": "0.6.x",
    "mustache": "0.4.x",
    "benchmark": "0.2.x"
  },
  "scripts": {
    "test": "vows --spec test/api-test.js"
  },
  "engines": [
    "node"
  ],
  "main": "./lib/plates.js",
  "readme": "![plates](https://github.com/flatiron/plates/raw/master/plates.png)\n\n# Synopsis\nPlates (short for templates) binds data to markup. Plates has NO special syntax. It works in the browser and in [Node.js](http://nodejs.org/).\n\n# Motivation\n- DSLs (Domain Specific Languages) such as <%=foo%> or {{foo}} reduce portability.\n- DOM templating is SLOW.\n- Promote the separation of concerns principle by decoupling decision making from presentation.\n- Make both the code and markup more readable and maintainable by a wider audience.\n\n# Status\n\n[![Build Status](https://secure.travis-ci.org/flatiron/plates.png)](http://travis-ci.org/flatiron/plates)\n\n# Features\n- Automatically bind data to a tag's body by matching unique tag IDs to data keys.\n- Bind data to a tag's body based on any attribute's values.\n- Bind data to a tag's attribute based on any attribute's values.\n\n- TODO: Specify option to create attribute if it does not exist.\n\n# Installation\nThere are a few ways to use `plates`. Install the library using npm. You can add\nit to your `package.json` file as a dependancy, or include the script in your\nHTML page.\n\n# Usage\n\n## Simple case\nBy default, `plates` will try to match the key in the data to an `id` in the\ntag, since both should be unique.\n\n```js\nvar Plates = require('plates');\n\nvar html = '<div id=\"test\">Old Value</div>';\nvar data = { \"test\": \"New Value\" };\n\nvar output = Plates.bind(html, data); \n```\n\n## Explicit instructions\nA common use case is to apply the new value to each tag's body based on the\n`class` attribute.\n\n```js\nvar html = '<span class=\"name\">User</span>...<span class=\"name\">User</span>';\n\nvar data = { \"username\": \"John Smith\" };\nvar map = Plates.Map();\n\nmap.class('name').to('username');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\n## Complex instructions\nAnother common case is to replace the value of an attribute if it is a match.\n\n```js\nvar html = '<a href=\"/\"></a>';\n\nvar data = { \"newurl\": \"http://www.nodejitsu.com\" };\nvar map = Plates.Map();\n\nmap.where('href').is('/').insert('newurl');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\nPartial value replacement\n\n```js\nvar html = '<a href=\"/foo/bar\"></a>';\n\nvar data = { \"newurl\": \"bazz\" };\nvar map = Plates.Map();\n\nmap.where('href').has(/bar/).insert('newurl'); // `has` can take a regular expression.\n\nconsole.log(Plates.bind(html, data, map));\n```\n\nIn even more complex cases, an arbitrary attribute can be specified. If a value\nis matched, a specific value can be used and then used as another attribute's\nvalue.\n\n```js\nvar html = '<img data-foo=\"bar\" src=\"\"></img>';\n\nvar data = { \"imageurl\": \"http://www.nodejitsu.com\" };\nvar map = Plates.Map();\n\nmap.where('data-foo').is('bar').use('imageurl').as('src');\n\nconsole.log(Plates.bind(html, data, map));\n```\n\n## Collections\n\nPlates can also iterate through collections:\n\n```js\nvar html = '<div class=\"name\"></div>';\nvar collection = [\n  {'name': 'Louis CK'},\n  {'name': 'Andy Kindler'},\n  {'name': 'Greg Giraldo'}\n];\n\nconsole.log(Plates.bind(html, collection));\n```\n\n## Partials\n\nPlates also supports partials:\n\n```js\nvar partial = '<li class=\"partial\"></li>';\nvar base = '<div><h1 class=\"foo\"></h1><ul class=\"menu\"></ul></div>';\n\nvar baseData = { foo: 'bar' };\nvar mapping = Plates.Map();\n\nmapping.class('menu').append(partial);\nconsole.log(Plates.bind(base, baseData, mapping));\n```\n\n# API\n\n## Plates Static Methods\n\n```\nfunction Plates.bind(html, data, map)\n@param html {String} A string of well-formed HTML.\n@param data {Object} A JSON object.\n@param map {Object} An instance of `Plates.Map()`.\n\n@return {String} The result of merging the data and html.\n```\n\n## Map Constructor\n\n```\nfunction Plates.Map(options)\n@options {Object} An object literal that contains configuration options.\n  - @option where {String} The default attribute to match on instead of ID.\n  - @option as {String} The default attribute to replace into.\n@return {Object} An object that represents a reusable map, has mapping methods.\n```\n\n## Map Instance Methods\n\n### where()\n\n```\nfunction Map#where(attribute)\n@param attribute {String} An attribute that may be found in a tag.\n\nThis method will initiate a clause. Once a clause has been established,\nother member methods may be chained to each other in any order.\n```\n\n### class(), className()\n\n```\nfunction Map#class(attribute)\n@param attribute {String} A value that may be found in the `class` attribute of a tag.\n```\n\n### is()\n\n```\nfunction Map#is(value)\n@param value {String} The value of the attribute specified in the `where` clause.\n```\n\n### has()\n\n```\nfunction Map#has(value)\n@param value {String|RegExp} The value of the attribute specified in the `where` clause.\n```\n\n### insert()\n\n```\nfunction Map#insert(attribute)\n@param attribute {String} A string that represents a key. Data will be inserted into \nthe attribute that was specified in the `where` clause.\n```\n\n### use()\n\n```\nfunction Map#use(key)\n@param key {String|Function} A string that represents a key in the data object that was provided or a function which returns a string value to use.\n\nIf a function is provided, it will be passed data, value and tagbody parameters.\n```\n\n### to()\n\n```\nfunction Map#to(key)\n@param key {String|Function} A string that represents a key in the data object that was provided or a function which returns a string value to use.\n\nIf a function is provided, it will be passed data, value and tagbody parameters.\n\nSame as `use` method.\n```\n\n### as()\n\n```\nfunction Map#as(attribute)\n@param attribute {String} A string that represents an attribute in the tag.\n\nIf there is no attribute by that name found, one may be created depending on the options\nthat were passed to the `Map` constructor.\n```\n\n### remove()\n\n```\nfunction Map#remove()\n\nRemoves the matching elements from the template.\n```\n\n### append(), partial()\n\n```\nfunction Map#append(html, data, map)\n@param html {String} A string that represents the new template that needs to be\nadded.\n@param data {Mixed} data for the partial, if it's a string it's a reference to a\nkey in the data structure that was supplied to the main template.\n@param map {Plates.Map} data mapping for the partial.\n\nIf the supplied HTML string doesn't contain any HTML markup we assume that we\nthe given string is the location of the template. When you are using Plates on\nthe browser is assumes that you supplied it with an id selector and will fetch\nthe innerHTML from the element. If you are using Plates in Node.js it assumes\nthat you gave it a file path that is relative to the current working directory.\n```\n\n# License\n\n(The MIT License)\n\nCopyright (c) 2011 Nodejitsu Inc. http://www.twitter.com/nodejitsu\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "plates@0.4.8",
  "_from": "plates@~0.4.8"
}
